AWSTemplateFormatVersion: 2010-09-09
Transform: 'AWS::Serverless-2016-10-31'
Description: Deploy Redis Instances in a region

Mappings:
  RegionMap:
    us-east-1: # Virginia
      "EC2AMI" : "ami-0d894ea5521c64557"
    us-east-2: # Ohio
      "EC2AMI" : "ami-082a25bc38620fc4d"
    us-east-3: # NCALIF
      "EC2AMI" : "ami-01773f954c3875420"
    us-west-2: # Oregon
      "EC2AMI" : "ami-05037ab6f618ed336"
    ap-south-1: # Mumbai
      "EC2AMI" : "ami-0eefc21aa52001198"
    ap-northeast-2: # Seoul
      "EC2AMI" : "ami-0967b7ff9a7ba331e"
    ap-southeast-1: # Singapore
      "EC2AMI" : "ami-052d3e5a59fc4a877"
    ap-southeast-2: # Sydney 
      "EC2AMI" : "ami-097cbef0451a30da5"
    ap-northeast-1: # Tokyo
      "EC2AMI" : "ami-0ce04ab8bcd5de2e9"
    eu-central-1: # Frankfurt
      "EC2AMI" : " ami-09304ee2fe70b3aad"
    eu-west-1: # Ireland
      "EC2AMI" : "ami-03b7776ede7f47475"
    eu-west-2: # London
      "EC2AMI" : "ami-0c2b997e5c91153e0"
    eu-west-3: # Paris  
      "EC2AMI" : "ami-0176733f200a89b17"
    eu-north-1: # Stockholm 
      "EC2AMI" : "ami-040e6fa2d290e7b9b"
    sa-east-1: # Sao Paulo 
      "EC2AMI" : "ami-06d197a564493b29b"

Parameters:
  RedisDatabasePort: 
    Description: Specify database port used for Redis
    Type: String
  ClusterName: 
    Description: Prefix Name of the Redis Cluster
    Type: String
  HostedZoneName: 
    Description: Hosted Zone Name to use.  This with the prefix cluster name is redis cluster name
    Type: String
  HostedZoneId:
    Description: HostedZoneNames can be duplicate so use Zone Id
    Type: String
  ClusterUserName:
    Description: cluster username email address
    Type: String
  ClusterPassword:
    Description: cluster password
    Type: String
  ClusterURL:
    Description: cluster URL
    Type: String
  LocalIp:
    Description: local IP address used for security group ssh port opening
    Type: String
  S3Bucket:
    Description: S3Bucket for holding redis connector spillage
    Type: String
  KeyPair:
    Description: key pair name for ec2 instances
    Type: String
  NumberInstances:
    Description: Number of Redis EC2 instances for this region
    Type: Number
    MinValue: 1
    MaxValue: 3
    Default: 3
  EC2InstanceType:
    Description: Amazon EC2 Instance Type  m4 and m5.xlarge 4-16 m5 has better network, 2xlarge 8-13,  r4.xlarge 4 30.5, 8 61
    Type: String
    Default: r4.2xlarge
    AllowedValues:
      - r4.xlarge
      - r4.2xlarge
      - r4.4xlarge
      - r4.8xlarge
      - r4.16xlarge
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - m4.16xlarge
      - c5a.xlarge
      - c5a.2xlarge
      - c5a.4xlarge
      - c5a.8xlarge
      - c5a.16xlarge
      - i3.large
      - i3.xlarge
      - i3.2xlarge
      - i3.4xlarge
      - i3.8xlarge
      - i3.16xlarge
    ConstraintDescription: Must be a valid EC2 instance type.

Conditions:
  Create-One: !Equals [ !Ref NumberInstances, 1 ]
  Create-Two: !Equals [ !Ref NumberInstances, 2 ]
  Create-Three: !Equals [ !Ref NumberInstances, 3 ]
  Do-Two: !Or
    - !Condition Create-Two
    - !Condition Create-Three

Resources:
  VPCStack:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      TemplateURL: VPCStack.yaml
      TimeoutInMinutes: 10
      Parameters:
        LocalIp:
          Ref: LocalIp
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 7aa57bac-380e-4523-a72b-ef898d0a0367

  RedisEC2N1:
    Type:  AWS::EC2::Instance
    DependsOn: 
      - VPCStack
    Properties:
      ImageId: 
        Fn::FindInMap:
        - RegionMap
        - !Ref AWS::Region
        - EC2AMI
      InstanceType: !Ref EC2InstanceType
      SubnetId: !GetAtt VPCStack.Outputs.PublicSubnet1Id
      KeyName: !Ref KeyPair
      SecurityGroupIds:
        - !GetAtt VPCStack.Outputs.WorkshopSecurityGroup
      Tags:
        - Key: 'Name'
          Value: !Join ['',  [!Ref AWS::StackName, 'VM1'] ]
      UserData:
        Fn::Base64:
          !Sub |
             #!/bin/bash -xe
             sudo  bash -l
             yum -y install git wget bind-utils
             /opt/redislabs/bin/rladmin cluster create name ${RedisNSRecord} persistent_path /var/opt/redislabs/persist  ephemeral_path /var/opt/redislabs/tmp  addr $(hostname -i) username ${ClusterUserName} password ${ClusterPassword} external_addr $(dig +short myip.opendns.com @resolver1.opendns.com) register_dns_suffix
             cd /home/ec2-user
             git clone https://github.com/jphaugla/redisAthenaQuickSight.git
             cd redisAthenaQuickSight
             cut -d '|' -f1,2 data/nation.tbl | sed -e 's/|/ "/' | sed -e 's/$/"/' | sed -e 's/^/nation-/' | sed -e 's/^/SET /' > data/redis.data
             sleep 120
             cat data/redis.data | /opt/redislabs/bin/redis-cli -c -p ${RedisDatabasePort}
             cat data/active_orders.data | /opt/redislabs/bin/redis-cli -c -p ${RedisDatabasePort}
             cd /home/ec2-user
             mkdir rlec
             cd rlec
             wget https://s3.amazonaws.com/redis-enterprise-software-downloads/6.2.8/redislabs-6.2.8-53-rhel7-x86_64.tar
             tar xvf redislabs-6.2.8-53-rhel7-x86_64.tar
             ./install.sh -y

  RedisEC2N2:
    Type:  AWS::EC2::Instance
    Condition: Do-Two
    DependsOn: 
      - VPCStack
      - RedisEC2N1
    Properties:
      ImageId: 
        Fn::FindInMap:
        - RegionMap
        - !Ref AWS::Region
        - EC2AMI
      InstanceType: !Ref EC2InstanceType
      SubnetId: !GetAtt VPCStack.Outputs.PublicSubnet1Id
      KeyName: !Ref KeyPair
      SecurityGroupIds:
        - !GetAtt VPCStack.Outputs.WorkshopSecurityGroup
      Tags:
        - Key: 'Name'
          Value: !Join ['',  [!Ref AWS::StackName, 'VM2'] ]
      UserData:
        Fn::Base64:
          !Sub |
             #!/bin/bash -xe
             sudo  bash -l
             yum -y install bind-utils git wget
             /opt/redislabs/bin/rladmin cluster join nodes $(dig +short node1.${ClusterName}.${HostedZoneName}) persistent_path /var/opt/redislabs/persist  ephemeral_path /var/opt/redislabs/tmp  addr $(hostname -i) username ${ClusterUserName} password ${ClusterPassword} 
             cd /home/ec2-user
             mkdir rlec
             cd rlec
             wget https://s3.amazonaws.com/redis-enterprise-software-downloads/6.2.8/redislabs-6.2.8-53-rhel7-x86_64.tar
             tar xvf redislabs-6.2.8-53-rhel7-x86_64.tar
             ./install.sh -y

  RedisEC2N3:
    Condition: Create-Three
    Type:  AWS::EC2::Instance
    DependsOn: 
      - VPCStack
      - RedisEC2N1
    Properties:
      ImageId: 
        Fn::FindInMap:
        - RegionMap
        - !Ref AWS::Region
        - EC2AMI
      InstanceType: !Ref EC2InstanceType
      SubnetId: !GetAtt VPCStack.Outputs.PublicSubnet1Id
      KeyName: !Ref KeyPair
      SecurityGroupIds:
        - !GetAtt VPCStack.Outputs.WorkshopSecurityGroup
      Tags:
        - Key: 'Name'
          Value: !Join ['',  [!Ref AWS::StackName, 'VM3'] ]
      UserData:
        Fn::Base64:
          !Sub |
             #!/bin/bash -xe
             sudo  bash -l
             yum -y install bind-utils git wget
             /opt/redislabs/bin/rladmin cluster join nodes $(dig +short node1.${ClusterName}.${HostedZoneName}) persistent_path /var/opt/redislabs/persist  ephemeral_path /var/opt/redislabs/tmp  addr $(hostname -i) username ${ClusterUserName} password ${ClusterPassword} 
             cd /home/ec2-user
             mkdir rlec
             cd rlec
             wget https://s3.amazonaws.com/redis-enterprise-software-downloads/6.2.8/redislabs-6.2.8-53-rhel7-x86_64.tar
             tar xvf redislabs-6.2.8-53-rhel7-x86_64.tar
             ./install.sh -y

  RedisARecord1:
    Type: AWS::Route53::RecordSet
    DependsOn: 
      - RedisEC2N1
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Comment: DNS name for my instance
      Name: !Join ['',  ['node1.', !Ref ClusterName, ., !Ref HostedZoneName ] ]  
      Type: A
      TTL: 900
      ResourceRecords:
        - !GetAtt RedisEC2N1.PublicIp

  RedisARecord2:
    Condition: Do-Two
    Type: AWS::Route53::RecordSet
    DependsOn: 
      - RedisEC2N2
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Comment: DNS name for my instance
      Name: !Join ['',  ['node2.', !Ref ClusterName, ., !Ref HostedZoneName ] ]  
      Type: A
      TTL: 900
      ResourceRecords:
        - !GetAtt RedisEC2N2.PublicIp

  RedisARecord3:
    Condition: Create-Three
    Type: AWS::Route53::RecordSet
    DependsOn: 
      - RedisEC2N3
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Comment: DNS name for my instance
      Name: !Join ['',  ['node3.', !Ref ClusterName, ., !Ref HostedZoneName ] ]  
      Type: A
      TTL: 900
      ResourceRecords:
        - !GetAtt RedisEC2N3.PublicIp

  RedisNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Join ['', [ !Ref ClusterName, ., !Ref HostedZoneName ] ]
      Type: NS
      TTL: '900'
      ResourceRecords:
        - !Join ['', [ 'node1.', !Ref ClusterName, ., !Ref HostedZoneName ] ]  
        - !Join ['', [ 'node2.', !Ref ClusterName, ., !Ref HostedZoneName ] ]  
        - !Join ['', [ 'node3.', !Ref ClusterName, ., !Ref HostedZoneName ] ]  

Outputs:

  Subnets:
    Description: Subnets for workshop
    Value: !Join [',', [!GetAtt VPCStack.Outputs.PublicSubnet1Id,!GetAtt VPCStack.Outputs.PublicSubnet2Id,!GetAtt VPCStack.Outputs.PublicSubnet3Id]]  

  WorkshopSecurityGroup:
    Description: 'Security Group'
    Value: !GetAtt VPCStack.Outputs.WorkshopSecurityGroup

  EMRSecurityGroup:
    Description: 'Security Group'
    Value: !GetAtt VPCStack.Outputs.EMRSecurityGroup 

  RedisInstancePrivateDNS:
    Description: 'Private DNS for Redis EC2 instance'
    Value: !GetAtt RedisEC2N1.PrivateDnsName

  RedisInstancePublicDNS:
    Description: 'Public DNS for Redis EC2 instance'
    Value: !GetAtt RedisEC2N1.PublicDnsName

  RedisInstancePrivateIP:
    Description: 'Private IP for Redis EC2 instance'
    Value: !GetAtt RedisEC2N1.PrivateIp

  RedisInstancePublicIP:
    Description: 'Public IP for Redis EC2 instance'
    Value: !GetAtt RedisEC2N1.PublicIp

  RedisNSRecord:
    Description: 'The NS Record Name for Redis'
    Value: !Ref RedisNSRecord

  RedisARecord1:
    Description: 'The A Record Name for Redis'
    Value: !Ref RedisARecord1

  RedisPort:
    Description: 'The Port used for Redis Database'
    Value: !Ref RedisDatabasePort
